/**
 * The MIT License (MIT)
 * Copyright (c) 2025 Advanced Micro Devices, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#pragma once
#include <libxml/parser.h>
#include <libxml/tree.h>

#include <string>

#include "kernel.hpp"
#include "register.hpp"

/**
 * @brief Class for parsing XML files containing kernel definitions.
 *
 * This class parses XML files generated by Vitis HLS tools
 * to extract kernel information, including interfaces, resource usage,
 * and register definitions. It uses the libxml2 library for XML parsing.
 */
class XmlParser {
    std::string fileName;  ///< Name of the XML file to parse
    xmlDocPtr document;    ///< XML document pointer
    xmlNode* rootNode;     ///< Root node of the XML document
    xmlNode* workingNode;  ///< Current working node during parsing
    Kernel kernel;         ///< Kernel object being populated from XML

   public:
    /**
     * @brief Constructor for XmlParser.
     * @param filename Path to the XML file to parse.
     *
     * Initializes the parser and loads the XML document.
     */
    XmlParser(const std::string& filename);

    /**
     * @brief Parses the XML file and populates the kernel object.
     *
     * This method traverses the XML document structure to extract
     * all relevant information about the kernel.
     */
    void parseXml();

    /**
     * @brief Gets the parsed kernel object.
     * @return Kernel object populated with data from the XML file.
     */
    Kernel getKernel();

    /**
     * @brief Converts xmlChar pointer to standard C++ string.
     * @param xmlCharPtr XML character pointer to convert.
     * @return Standard C++ string containing the converted value.
     *
     * Helper method to convert between libxml2 character types and C++ strings.
     */
    static std::string convertFromXmlCharPtr(const xmlChar* xmlCharPtr);

    /**
     * @brief Parses a register node from the XML document.
     * @param node XML node containing register information.
     *
     * This method extracts register information from an XML node
     * and adds it to the kernel object.
     */
    void parseRegisterNode(xmlNodePtr node);

    /**
     * @brief Parses a register field node from the XML document.
     * @param node XML node containing register field information.
     *
     * This method extracts register field details from an XML node.
     */
    void parseFieldNode(xmlNodePtr node);
};